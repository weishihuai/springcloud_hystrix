雪崩效应的原因：

1) 服务提供者不可用
  a.硬件故障
  b.程序Bug
  c.用户大量请求：在秒杀和大促开始前,如果准备不充分,用户发起大量请求造成服务提供者的不可用

2) 重试加大流量
  a.用户重试：用户由于忍受不了界面上长时间的等待,而不断刷新页面甚至提交表单
  b.代码逻辑重试：服务调用端的会存在大量服务异常后的重试逻辑

3) 服务调用者不可用
  a.同步等待造成的资源耗尽：使用 同步调用 时, 会产生大量的等待线程占用系统资源. 一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 造成服务雪崩效应产生


雪崩效应的解决措施：
1) 流量控制
  a.网关限流
  因为Nginx的高性能, 目前一线互联网公司大量采用Nginx+Lua的网关进行流量控制, 由此而来的OpenResty也越来越热门.
  b.用户交互限流
  具体措施:
    a21. 采用加载动画,提高用户的忍耐等待时间.
    a22. 提交按钮添加强制等待时间机制.
  c.关闭重试

2) 改进缓存模式
  a.缓存预加载
  b.同步改为异步刷新

3) 服务自动扩容
  a.AWS的auto scaling

4) 服务调用者降级服务
  a.资源隔离：主要是对调用服务的线程池进行隔离.
  b.对依赖服务进行分类
  依赖服务分为: 强依赖和若依赖. 强依赖服务不可用会导致当前业务中止,而弱依赖服务的不可用不会导致当前业务的中止.
  c.不可用服务的调用快速失败

一般通过 超时机制, 熔断器 和熔断后的 降级方法 来实现